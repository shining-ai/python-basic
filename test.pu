@startuml test
left to right direction

state 分割統治法 #Orange
state 再帰関数 #Orange
state 動的計画法 #Orange

state グラフ #PowderBlue
グラフ: 1. 隣接行列
グラフ: 2. 隣接リスト
state 木構造 #PowderBlue
state 二分木 #PowderBlue
state リスト #PowderBlue
state 二分探索木 #PowderBlue
state 完全二分木 #PowderBlue
state 二分ヒープ #PowderBlue
state 優先度付きキュー #PowderBlue
state スタック #PowderBlue
state キュー #PowderBlue
state UnionFind #PowderBlue
state ハッシュ #PowderBlue


初等的ソート: 1. バブルソート
初等的ソート: 2. 選択ソート
初等的ソート: 3. 挿入ソート
初等的ソート: 4. シェルソート

高等的整列: 1. マージソート
高等的整列: 2. クイックソート
高等的整列: 3. ヒープソート
高等的整列: 4. カウントソート
高等的整列: 5. バケットソート
高等的整列: 6. 基数ソート



ベクトル演算: 1. 射影
ベクトル演算: 2. 反射
ベクトル演算: 3. 垂直・平行判定i
ベクトル演算: 4. 距離
ベクトル演算: 5. 線分の交点
ベクトル演算: 6. 円と直線の交点
ベクトル演算: 7. 円と円の交点




' 配列 --> スタック
' 配列 --> キュー
' 配列 --> 線形探索
' 配列 --> 二分探索
' 配列 --> ハッシュ
' 配列 --> 木構造
' 配列 --> 動的計画法
' 配列 --> 完全二分木
' 配列 --> 初等的ソート
' 配列 --> グラフ
' 配列 --> 素数判定
木構造 --> 二分木
二分木 --> 二分探索木
リスト --> 二分探索木
完全二分木 --> 二分ヒープ
二分ヒープ --> 優先度付きキュー
キュー --> 優先度付きキュー
初等的ソート --> パーティション
パーティション --> 高等的整列
リスト --> グラフ
深さ優先探索 --> 連結成分分解
幅優先探索 --> 連結成分分解
最小全域木 --> 最短経路
木構造 --> UnionFind
高等的整列 --> 領域探索
木の巡回 --> 領域探索
深さ優先探索 --> 関節点
深さ優先探索 --> トポロジカルソート
幅優先探索 --> トポロジカルソート
幅優先探索 --> 木の直径
高等的整列 --> 最小全域木
二分探索 --> 最長増加部分列
深さ優先探索 --> バックトラック
バックトラック --> IDA
幅優先探索 --> A

再帰関数 --> 木の巡回
動的計画法 --> 最長共通部分列
動的計画法 --> 連鎖行列積
再帰関数 --> 深さ優先探索
分割統治法 --> 高等的整列
動的計画法 --> 全点対間最短経路
動的計画法 --> 最長増加部分列
動的計画法 --> ナップサック問題
動的計画法 --> 正方形探索
動的計画法 --> 長方形探索
再帰関数 --> 最大公約数
再帰関数 --> べき乗

スタック --> 凸包
スタック --> 深さ優先探索
スタック --> 長方形探索
グラフ --> 深さ優先探索
グラフ --> 幅優先探索
グラフ --> 連結成分分解
グラフ -->  最小全域木
グラフ --> 全点対間最短経路
キュー --> 幅優先探索
優先度付きキュー --> 最短経路
二分木 --> 木の巡回
二分探索木 --> 領域探索
二分探索木 --> 平面走査
反時計回り --> 線分の交差判定
反時計回り --> 点の包含判定
反時計回り --> 凸包
高等的整列 --> 凸包
高等的整列 --> 平面走査
ベクトル演算 --> 反時計回り
UnionFind --> 最小全域木
ハッシュ --> A


@enduml



